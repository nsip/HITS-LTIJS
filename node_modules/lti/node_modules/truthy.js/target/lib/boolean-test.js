(function() {
  var bilby, boolean, should;

  bilby = require('bilby');

  boolean = require('./boolean');

  should = require('should');

  describe('boolean', function() {
    describe('arrayey()', function() {
      it('should return false if null', function() {
        return boolean.arrayey(null).should.be["false"];
      });
      it('should return false if 0', function() {
        return boolean.arrayey(0).should.be["false"];
      });
      it('should return false if an empty string', function() {
        return boolean.arrayey('').should.be["false"];
      });
      it('should return true if an empty array', function() {
        return boolean.arrayey([]).should.be["true"];
      });
      it('should return false if an empty object', function() {
        return boolean.arrayey({}).should.be["false"];
      });
      it('should return false if true', function() {
        return boolean.arrayey(true).should.be["false"];
      });
      return it('should return false if false', function() {
        return boolean.arrayey(false).should.be["false"];
      });
    });
    describe('booleany()', function() {
      it('should return false if null', function() {
        return boolean.booleany(null).should.be["false"];
      });
      it('should return false if 0', function() {
        return boolean.booleany(0).should.be["false"];
      });
      it('should return false if an empty string', function() {
        return boolean.booleany('').should.be["false"];
      });
      it('should return false if an empty array', function() {
        return boolean.booleany([]).should.be["false"];
      });
      it('should return false if an empty object', function() {
        return boolean.booleany({}).should.be["false"];
      });
      it('should return true if true', function() {
        return boolean.booleany(true).should.be["true"];
      });
      return it('should return true if false', function() {
        return boolean.booleany(false).should.be["true"];
      });
    });
    describe('existy()', function() {
      it('should return false if null', function() {
        return boolean.existy(null).should.be["false"];
      });
      it('should return true if 0', function() {
        return boolean.existy(0).should.be["true"];
      });
      it('should return true if an empty string', function() {
        return boolean.existy('').should.be["true"];
      });
      it('should return true if an empty array', function() {
        return boolean.existy([]).should.be["true"];
      });
      it('should return true if an empty object', function() {
        return boolean.existy({}).should.be["true"];
      });
      it('should return true if true', function() {
        return boolean.existy(true).should.be["true"];
      });
      return it('should return true if false', function() {
        return boolean.existy(false).should.be["true"];
      });
    });
    describe('extensibley()', function() {
      it('should return false if null', function() {
        return boolean.extensibley(null).should.be["false"];
      });
      it('should return false if 0', function() {
        return boolean.extensibley(0).should.be["false"];
      });
      it('should return false if an empty string', function() {
        return boolean.extensibley('').should.be["false"];
      });
      it('should return true if an empty array', function() {
        return boolean.extensibley([]).should.be["true"];
      });
      it('should return true if an empty object', function() {
        return boolean.extensibley({}).should.be["true"];
      });
      it('should return false if true', function() {
        return boolean.extensibley(true).should.be["false"];
      });
      it('should return false if false', function() {
        return boolean.extensibley(false).should.be["false"];
      });
      it('should return false if an empty array', function() {
        return boolean.extensibley(Object.preventExtensions([])).should.be["false"];
      });
      return it('should return false if an empty object', function() {
        return boolean.extensibley(Object.preventExtensions({})).should.be["false"];
      });
    });
    describe('finitey()', function() {
      it('should return false if null', function() {
        return boolean.finitey(null).should.be["false"];
      });
      it('should return true if 0', function() {
        return boolean.finitey(0).should.be["true"];
      });
      it('should return false if an empty string', function() {
        return boolean.finitey('').should.be["false"];
      });
      it('should return false if an empty array', function() {
        return boolean.finitey([]).should.be["false"];
      });
      it('should return false if an empty object', function() {
        return boolean.finitey({}).should.be["false"];
      });
      it('should return false if true', function() {
        return boolean.finitey(true).should.be["false"];
      });
      it('should return false if false', function() {
        return boolean.finitey(false).should.be["false"];
      });
      it('should return false if function', function() {
        return boolean.finitey(function() {}).should.be["false"];
      });
      it('should return true if string of 1', function() {
        return boolean.finitey('1').should.be["true"];
      });
      return it('should return false if string of bob', function() {
        return boolean.finitey('bob').should.be["false"];
      });
    });
    describe('functiony()', function() {
      it('should return false if null', function() {
        return boolean.functiony(null).should.be["false"];
      });
      it('should return false if 0', function() {
        return boolean.functiony(0).should.be["false"];
      });
      it('should return false if an empty string', function() {
        return boolean.functiony('').should.be["false"];
      });
      it('should return false if an empty array', function() {
        return boolean.functiony([]).should.be["false"];
      });
      it('should return false if an empty object', function() {
        return boolean.functiony({}).should.be["false"];
      });
      it('should return false if true', function() {
        return boolean.functiony(true).should.be["false"];
      });
      it('should return false if false', function() {
        return boolean.functiony(false).should.be["false"];
      });
      return it('should return true if function', function() {
        return boolean.functiony(function() {}).should.be["true"];
      });
    });
    describe('frozeny()', function() {
      it('should return false if null', function() {
        return boolean.frozeny(null).should.be["false"];
      });
      it('should return false if 0', function() {
        return boolean.frozeny(0).should.be["false"];
      });
      it('should return false if an empty string', function() {
        return boolean.frozeny('').should.be["false"];
      });
      it('should return false if an empty array', function() {
        return boolean.frozeny([]).should.be["false"];
      });
      it('should return false if an empty object', function() {
        return boolean.frozeny({}).should.be["false"];
      });
      it('should return false if true', function() {
        return boolean.frozeny(true).should.be["false"];
      });
      it('should return false if false', function() {
        return boolean.frozeny(false).should.be["false"];
      });
      return it('should return true if a frozen empty object', function() {
        return boolean.frozeny(Object.freeze({})).should.be["true"];
      });
    });
    describe('lengthy()', function() {
      it('should return false if null', function() {
        return boolean.lengthy(null).should.be["false"];
      });
      it('should return false if 0', function() {
        return boolean.lengthy(0).should.be["false"];
      });
      it('should return false if an empty string', function() {
        return boolean.lengthy('').should.be["false"];
      });
      it('should return false if an empty array', function() {
        return boolean.lengthy([]).should.be["false"];
      });
      it('should return false if an empty object', function() {
        return boolean.lengthy({}).should.be["false"];
      });
      it('should return false if true', function() {
        return boolean.lengthy(true).should.be["false"];
      });
      it('should return false if false', function() {
        return boolean.lengthy(false).should.be["false"];
      });
      it('should return true if a non-empty string', function() {
        return boolean.lengthy('non').should.be["true"];
      });
      it('should return true if a non-empty array', function() {
        return boolean.lengthy('non').should.be["true"];
      });
      return it('should return true if a non-empty object', function() {
        return boolean.lengthy({
          non: 'non'
        }).should.be["true"];
      });
    });
    describe('nany()', function() {
      it('should return false if null', function() {
        return boolean.nany(null).should.be["false"];
      });
      it('should return false if 0', function() {
        return boolean.nany(0).should.be["false"];
      });
      it('should return false if an empty string', function() {
        return boolean.nany('').should.be["false"];
      });
      it('should return false if an empty array', function() {
        return boolean.nany([]).should.be["false"];
      });
      it('should return true if an empty object', function() {
        return boolean.nany({}).should.be["true"];
      });
      it('should return false if true', function() {
        return boolean.nany(true).should.be["false"];
      });
      it('should return false if false', function() {
        return boolean.nany(false).should.be["false"];
      });
      return it('should return true if NaN', function() {
        return boolean.nany(NaN).should.be["true"];
      });
    });
    describe('numbery()', function() {
      it('should return false if null', function() {
        return boolean.numbery(null).should.be["false"];
      });
      it('should return true if 0', function() {
        return boolean.numbery(0).should.be["true"];
      });
      it('should return false if an empty string', function() {
        return boolean.numbery('').should.be["false"];
      });
      it('should return false if an empty array', function() {
        return boolean.numbery([]).should.be["false"];
      });
      it('should return false if an empty object', function() {
        return boolean.numbery({}).should.be["false"];
      });
      it('should return false if true', function() {
        return boolean.numbery(true).should.be["false"];
      });
      return it('should return false if false', function() {
        return boolean.numbery(false).should.be["false"];
      });
    });
    describe('objecty()', function() {
      it('should return false if null', function() {
        return boolean.objecty(null).should.be["false"];
      });
      it('should return false if 0', function() {
        return boolean.objecty(0).should.be["false"];
      });
      it('should return false if an empty string', function() {
        return boolean.objecty('').should.be["false"];
      });
      it('should return true if an empty array', function() {
        return boolean.objecty([]).should.be["true"];
      });
      it('should return true if an empty object', function() {
        return boolean.objecty({}).should.be["true"];
      });
      it('should return false if true', function() {
        return boolean.objecty(true).should.be["false"];
      });
      it('should return false if false', function() {
        return boolean.objecty(false).should.be["false"];
      });
      return it('should return false if function', function() {
        return boolean.objecty(function() {}).should.be["false"];
      });
    });
    describe('sealedy()', function() {
      it('should return false if null', function() {
        return boolean.sealedy(null).should.be["false"];
      });
      it('should return false if 0', function() {
        return boolean.sealedy(0).should.be["false"];
      });
      it('should return false if an empty string', function() {
        return boolean.sealedy('').should.be["false"];
      });
      it('should return false if an empty array', function() {
        return boolean.sealedy([]).should.be["false"];
      });
      it('should return false if an empty object', function() {
        return boolean.sealedy({}).should.be["false"];
      });
      it('should return false if true', function() {
        return boolean.sealedy(true).should.be["false"];
      });
      it('should return false if false', function() {
        return boolean.sealedy(false).should.be["false"];
      });
      return it('should return true if an empty object', function() {
        return boolean.sealedy(Object.seal({})).should.be["true"];
      });
    });
    describe('stringy()', function() {
      it('should return false if null', function() {
        return boolean.stringy(null).should.be["false"];
      });
      it('should return false if 0', function() {
        return boolean.stringy(0).should.be["false"];
      });
      it('should return true if an empty string', function() {
        return boolean.stringy('').should.be["true"];
      });
      it('should return false if an empty array', function() {
        return boolean.stringy([]).should.be["false"];
      });
      it('should return false if an empty object', function() {
        return boolean.stringy({}).should.be["false"];
      });
      it('should return false if true', function() {
        return boolean.stringy(true).should.be["false"];
      });
      it('should return false if false', function() {
        return boolean.stringy(false).should.be["false"];
      });
      return it('should return false if function', function() {
        return boolean.stringy(function() {}).should.be["false"];
      });
    });
    return describe('truthy()', function() {
      it('should return false if null', function() {
        return boolean.truthy(null).should.be["false"];
      });
      it('should return true if 0', function() {
        return boolean.truthy(0).should.be["true"];
      });
      it('should return true if an empty string', function() {
        return boolean.truthy('').should.be["true"];
      });
      it('should return true if an empty array', function() {
        return boolean.truthy([]).should.be["true"];
      });
      it('should return true if an empty object', function() {
        return boolean.truthy({}).should.be["true"];
      });
      it('should return true if true', function() {
        return boolean.truthy(true).should.be["true"];
      });
      return it('should return false if false', function() {
        return boolean.truthy(false).should.be["false"];
      });
    });
  });

}).call(this);
