{
  "author": {
    "name": "Rocky Madden",
    "url": "http://rockymadden.com/"
  },
  "dependencies": {
    "bilby": "0.0.x"
  },
  "description": "Functions to simplify/normalize rules with the ability to leverage monads and applicative functors over traditional control structures.",
  "devDependencies": {
    "coffee-script": "1.6.x",
    "grunt": "0.4.x",
    "grunt-cli": "0.1.x",
    "grunt-contrib-coffee": "0.7.x",
    "grunt-mocha-cov": "0.1.x",
    "mocha-term-cov-reporter": "0.2.x",
    "should": "2.1.x"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "http://rockymadden.com/truthy.js/",
  "keywords": [
    "truth",
    "truthy",
    "boolean",
    "evaluation",
    "monad",
    "option",
    "either",
    "validation",
    "applicative functor"
  ],
  "main": "target/truthy.js",
  "name": "truthy.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/rockymadden/truthy.js.git"
  },
  "scripts": {
    "prepublish": "grunt"
  },
  "version": "0.6.1",
  "readme": "#truthy.js [![Build Status](http://img.shields.io/travis-ci/rockymadden/truthy.js.png)](http://travis-ci.org/rockymadden/truthy.js) [![Generic](http://img.shields.io/coverage/100%25.png?color=green)]()\n\nReasons this project exists:\n* Each new JavaScript project I create, I end up defining a handful of basic functions to help simplify/normalize rules (e.g. existence check of both null/undefined).\n* Strong preference for monads and applicative functors over traditional control structures (e.g. if/else). Wondering what the heck a monad or applicative functor is and why you might want to use one? Checkout this [30 minute video](https://www.youtube.com/watch?v=Mw_Jnn_Y5iA).\n\nMatrix:\n\n| <sub>__Function__</sub>  | <sub>__True when__</sub>                                                     | <sub>__Boolean(a): true/false__</sub> | <sub>__Option(a): Some(a)/None__</sub> | <sub>__Either(a): Left(a)/Right(a)__</sub> | <sub>__Validation(a, e): success(a)/failure(e)__</sub> |\n|:------------------------ |:---------------------------------------------------------------------------- |:----------------------------------:|:--------------------------------------:|:------------------------------------------:|:------------------------------------------------------:|\n| <sub>arrayey</sub>       | <sub>existy and Array.isArray</sub>                                          | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>booleany</sub>      | <sub>existy and type of boolean</sub>                                        | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>existy</sub>        | <sub>not null or undefined</sub>                                             | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>extensibley</sub>   | <sub>objecty and Object.isExtensible</sub>                                   | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>finitey</sub>       | <sub>(numbery and isFinite) or (stringy and lengthy and isFinite)</sub>      | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>frozeny</sub>       | <sub>objecty and Object.isFrozen</sub>                                       | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>functiony</sub>     | <sub>existy and type of function</sub>                                       | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>lengthy</sub>       | <sub>existy, length property, and length is > 0 (works on objects too)</sub> | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>nany</sub>          | <sub>isNaN</sub>                                                             | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>numbery</sub>       | <sub>existy and type of number</sub>                                         | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>objecty</sub>       | <sub>existy and type of object</sub>                                         | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>sealedy</sub>       | <sub>objecty and Object.isSealed</sub>                                       | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>stringy</sub>       | <sub>existy and type of string</sub>                                         | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>truthy</sub>        | <sub>existy and not boolean false</sub>                                      | <sub>X</sub>                       | <sub>X</sub>                           | <sub>X</sub>                               | <sub>X</sub>                                           |\n| <sub>eitherize</sub>     | <sub>your function evaluates true</sub>                                      |                                    |                                        | <sub>X</sub>                               |                                                        |\n| <sub>optionize</sub>     | <sub>your function evaluates true</sub>                                      |                                    | <sub>X</sub>                           |                                            |                                                        |\n| <sub>validationize</sub> | <sub>your function evaluates true</sub>                                      |                                    |                                        |                                            | <sub>X</sub>                                           |\n\nThis project leverages option, either, and validation from [bilby.js](http://bilby.brianmckenna.org/) by [Brian McKenna](https://github.com/puffnfresh).\n\n## Depending Upon\nThe project is available on the [Node Packaged Modules registry](https://npmjs.org/package/truthy-js). Add the dependency to your package.json file:\n\n```javascript\n\"dependencies\": {\n\t\"truthy.js\": \"0.6.x\"\n}\n```\n\n## Usage (CoffeeScript)\nBoolean:\n```coffeescript\n# true\ntruthy.boolean.existy(0)\ntruthy.bool.existy(0)\ntruthy.b.existy(0)\n\n# false\ntruthy.boolean.existy(null)\ntruthy.bool.existy(null)\ntruthy.b.existy(null)\n```\n\n---\n\n[Option](http://bilby.brianmckenna.org/#option):\n```coffeescript\n# 9\ntruthy.option.existy(0).map((a) -> a + 9).getOrElse(1)\ntruthy.opt.existy(0).map((a) -> a + 9).getOrElse(1)\ntruthy.o.existy(0).map((a) -> a + 9).getOrElse(1)\n\n# 1\ntruthy.option.existy(null).map((a) -> a + 9).getOrElse(1)\ntruthy.opt.existy(null).map((a) -> a + 9).getOrElse(1)\ntruthy.o.existy(null).map((a) -> a + 9).getOrElse(1)\n```\n\n---\n\n[Either](http://bilby.brianmckenna.org/#either):\n```coffeescript\n# 10\ntruthy.either.existy(0).fold(\n\t(-> -1),\n\t((a) -> v + 10)\n)\ntruthy.eth.existy(0).fold(\n\t(-> -1),\n\t((a) -> v + 10)\n)\ntruthy.e.existy(0).fold(\n\t(-> -1),\n\t((a) -> v + 10)\n)\n\n# -1\ntruthy.either.existy(null).fold(\n\t(-> -1),\n\t((a) -> v + 10)\n)\ntruthy.eth.existy(null).fold(\n\t(-> -1),\n\t((a) -> v + 10)\n)\ntruthy.e.existy(null).fold(\n\t(-> -1),\n\t((a) -> v + 10)\n)\n```\n\n---\n\n[Validation](http://bilby.brianmckenna.org/#validation):\n```coffeescript\n# Not an example of actual usage, checkout the link above.\n# { value: 0 }\ntruthy.validation.existy(0, ['oh noes'])\ntruthy.vld.existy(0, ['oh noes'])\ntruthy.v.existy(0, ['oh noes'])\n\n# Not an example of actual usage, checkout the link above.\n# { errors: ['oh noes'] }\ntruthy.validation.existy(null, ['oh noes'])\ntruthy.vld.existy(null, ['oh noes'])\ntruthy.v.existy(null, ['oh noes'])\n```\n\n---\n\nMake your own:\n```coffeescript\nf = truthy.eitherize((a) -> v is 99)\n\n# 1\nf(0).fold(\n\t((a) -> a + 1),\n\t((a) -> a - 1)\n)\n\n# 98\nf(99).fold(\n\t((a) -> a + 1),\n\t((a) -> a - 1)\n)\n```\n\n---\n\n[Operator overloading](http://bilby.brianmckenna.org/#do-operator-overloading) (via bilby.js):\n\n```coffeescript\n# 'hello world'\nbilby.Do()(\n\ttruthy.option.stringy >> truthy.optionize((a) -> v is 'hello world')\n)('hello world').getOrElse('goodbye world')\n\n# 'goodbye world'\nbilby.Do()(\n\ttruthy.option.stringy >> truthy.optionize((a) -> v is 'hello world')\n)('hi').getOrElse('goodbye world')\n```\n\n---\n\n## License\n```\nThe MIT License (MIT)\n\nCopyright (c) 2013 Rocky Madden (http://rockymadden.com/)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/rockymadden/truthy.js/issues"
  },
  "_id": "truthy.js@0.6.1",
  "dist": {
    "shasum": "ad5ba0c7298848cbb26a09f4b19fdfeb66821c43",
    "tarball": "http://registry.npmjs.org/truthy.js/-/truthy.js-0.6.1.tgz"
  },
  "_from": "truthy.js@>=0.6.0 <0.7.0",
  "_npmVersion": "1.3.21",
  "_npmUser": {
    "name": "rockymadden",
    "email": "npm@rockymadden.com"
  },
  "maintainers": [
    {
      "name": "rockymadden",
      "email": "npm@rockymadden.com"
    }
  ],
  "directories": {},
  "_shasum": "ad5ba0c7298848cbb26a09f4b19fdfeb66821c43",
  "_resolved": "https://registry.npmjs.org/truthy.js/-/truthy.js-0.6.1.tgz"
}
